version: 2.1
jobs:
  obtain_parameters:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: 2xlarge+
    steps:
      - configure_env
      - install_rust
      - run:
          name: Install paramcache from head of rust-fil-proofs master branch
          command: |
            cargo install filecoin-proofs --bin=paramcache --force --git=https://github.com/filecoin-project/rust-fil-proofs.git --branch=master
            which paramcache || { printf '%s\n' "missing paramcache binary" >&2; exit 1; }
      - restore_parameter_cache
      - run:
          name: Generate Groth parameters and verifying keys
          command: paramcache
          no_output_timeout: 1h
      - save_parameter_cache
  cargo_fetch:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - configure_env
      - checkout
      - restore_cache:
          keys:
            - cargo-v0-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - run: rustup install $(cat rust-toolchain)
      - run: rustup default $(cat rust-toolchain)
      - run: rustup component add rustfmt-preview
      - run: rustup component add clippy-preview
      - run: cargo fetch
      - run: rustc +stable --version
      - run: rustc +$(cat rust-toolchain) --version
      - persist_to_workspace:
          root: "."
          paths:
            - Cargo.lock
      - save_cache:
          key: cargo-v0-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
          paths:
            - /root/.cargo
            - /root/.rustup

  test:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: 2xlarge+
    steps:
      - configure_env
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v0-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - restore_cache:
          keys:
            - parameter-cache-{{ .Revision }}
      - run:
          name: Test (nightly)
          command: cargo test --release --verbose --all
          no_output_timeout: 15m

  rustfmt:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - configure_env
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v0-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - run:
          name: Run cargo fmt
          command: cargo fmt --all -- --check

  clippy:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - configure_env
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v0-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - run:
          name: Run cargo clippy
          command: cargo clippy --all

  build_linux_release:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - configure_env
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v0-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - run:
          name: Install jq
          command: apt-get install jq -yqq
      - run:
          name: Build the release
          command: ./scripts/build-release.sh $(cat ./rust-toolchain) --verbose --frozen --all
      - run:
          name: Publish release to GitHub
          command: bash ./scripts/publish-release.sh

  build_darwin_release:
    macos:
      xcode: "10.0.0"
    working_directory: ~/crate
    resource_class: large
    steps:
      - configure_env
      - run:
          name: Configure environment variables
          command: |
            echo 'export PATH="${HOME}/.cargo/bin:${HOME}/.bin:${PATH}"' >> $BASH_ENV
            echo 'export CIRCLE_ARTIFACTS="/tmp"' >> $BASH_ENV
      - checkout
      - run:
          name: Install Rust
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: rustup install $(cat rust-toolchain)
      - run: rustup default $(cat rust-toolchain)
      - run: cargo fetch
      - run:
          name: Install jq
          command: |
            mkdir $HOME/.bin
            curl --location https://github.com/stedolan/jq/releases/download/jq-1.6/jq-osx-amd64 --output $HOME/.bin/jq
            chmod +x $HOME/.bin/jq
      - run:
          name: Build the release
          command: ./scripts/build-release.sh $(cat ./rust-toolchain) --verbose --frozen --all
      - run:
          name: Publish to GitHub
          command: bash ./scripts/publish-release.sh

workflows:
  version: 2
  test_all:
    jobs:
      - obtain_parameters
      - cargo_fetch
      - rustfmt:
          requires:
            - cargo_fetch
      - clippy:
          requires:
            - cargo_fetch
      - test:
          requires:
            - obtain_parameters
            - cargo_fetch
      - build_linux_release:
          requires:
            - cargo_fetch
          filters:
            branches:
              only: master
      - build_darwin_release:
          requires:
            - cargo_fetch
          filters:
            branches:
              only: master
commands:
  configure_env:
    steps:
      - run:
          name: Configure environment variables
          command: |
            echo 'export RUST_LOG=info' >> $BASH_ENV
            echo 'export FIL_PROOFS_PARAMETER_CACHE="/tmp/filecoin-parameter-cache"' >> $BASH_ENV
            echo 'export PATH="${CARGO_HOME}/bin:${PATH}"' >> $BASH_ENV
            source $BASH_ENV
  restore_parameter_cache:
    steps:
      - restore_cache:
          key: v17-proof-params-{{ arch }}
          paths:
            - /tmp/filecoin-parameter-cache
  save_parameter_cache:
    steps:
      - save_cache:
          key: v17-proof-params-{{ arch }}
          paths:
            - /tmp/filecoin-parameter-cache
  install_rust:
    steps:
      - run:
          name: Install Rust
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
